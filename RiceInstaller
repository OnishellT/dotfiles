#!/bin/sh
#  ██████╗ ██╗ ██████╗███████╗    ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗
#  ██╔══██╗██║██╔════╝██╔════╝    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗
#  ██████╔╝██║██║     █████╗      ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝
#  ██╔══██╗██║██║     ██╔══╝      ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗
#  ██║  ██║██║╚██████╗███████╗    ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║
#  ╚═╝  ╚═╝╚═╝ ╚═════╝╚══════╝    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝
#
#  Author  -   gh0stzk
#  Repo    -   https://github.com/gh0stzk/dotfiles
#  Last updated  -  2025-03-24 (Artix s6 compatibility)
#
#  RiceInstaller - Script to install my dotfiles on Artix (s6)
#
#  GPL-3.0

# Colors
CRE=$(tput setaf 1)    # Red
CYE=$(tput setaf 3)    # Yellow
CGR=$(tput setaf 2)    # Green
CBL=$(tput setaf 4)    # Blue
BLD=$(tput bold)       # Bold
CNC=$(tput sgr0)       # Reset colors

# Global vars
backup_folder="$HOME/.RiceBackup"
ERROR_LOG="$HOME/RiceError.log"

# ----- Helpers -----
logo() {
    text="$1"
    printf "%b" "
               %%%
        %%%%%//%%%%%
      %%************%%%
  (%%//############*****%%
 %%%%**###&&&&&&&&&###**//
 %%(**##&&&#########&&&##**
 %%(**##*****#####*****##**%%%
 %%(**##     *****     ##**
   //##   @@**   @@   ##//
     ##     **###     ##
     #######     #####//
       ###**&&&&&**###
       &&&         &&&
       &&&////   &&
          &&//@@@**
            ..***

   ${BLD}${CRE}[ ${CYE}${text} ${CRE}]${CNC}\n\n"
}

log_error() {
    error_msg=$1
    timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    printf "%s" "[${timestamp}] ERROR: ${error_msg}\n" >> "$ERROR_LOG"
    printf "%s%sERROR:%s %s\n" "${CRE}" "${BLD}" "${CNC}" "${error_msg}" >&2
}

is_installed() {
    pacman -Qq "$1" >/dev/null 2>&1
}

is_reflector() {
    if ! command -v reflector >/dev/null 2>&1; then
        printf "\t%b\n" "${BLD}${CBL}Installing reflector to get the best mirrors...${CNC}"
        sudo pacman -Syy 2>&1 | tee -a "$ERROR_LOG" >/dev/null
        sudo pacman -S --noconfirm reflector 2>&1 | tee -a "$ERROR_LOG" >/dev/null
    fi
}

# ----- Initial checks -----
initial_checks() {
    : > "$ERROR_LOG" 2>/dev/null

    if [ "$(id -u)" = 0 ]; then
        log_error "This script MUST NOT be run as root user."
        exit 1
    fi

    if [ "$PWD" != "$HOME" ]; then
        log_error "The script must be executed from HOME directory."
        exit 1
    fi

    if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
        log_error "No internet connection detected."
        exit 1
    fi
}

welcome() {
    clear
    logo "Welcome $USER"

    printf "%b" "${BLD}${CGR}This script will install my dotfiles and this is what it will do:${CNC}

  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} 2 Repositories will be installed. ${CBL}gh0stzk-dotfiles${CNC} and ${CBL}Chaotic-Aur${CNC}
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Check necessary dependencies and install them
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Download my dotfiles in ${HOME}/dotfiles
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Backup of possible existing configurations (bspwm, polybar, etc...)
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Install my configuration
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Configure MPD to autostart in your session (Artix s6)
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Change your shell to zsh shell

${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}My dotfiles DO NOT modify any of your system configurations${CNC}
${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}This script does NOT have the potential power to break your system${CNC}

"

    while :; do
        printf " %b" "${BLD}${CGR}Do you wish to continue?${CNC} [y/N]: "
        read -r yn
        case "$yn" in
            [Yy]) break ;;
            [Nn]|"") printf "\n%b\n" "${BLD}${CYE}Operation cancelled${CNC}"; exit 0 ;;
            *) printf "\n%b\n" "${BLD}${CRE}Error:${CNC} Just write '${BLD}${CYE}y${CNC}' or '${BLD}${CYE}n${CNC}'" ;;
        esac
    done
}

# ----- Repositories -----
add_gh0stzk_repo() {
    clear
    logo "Add gh0stzk custom repo"
    repo_name="gh0stzk-dotfiles"
    sleep 1

    printf "%b\n" "${BLD}${CYE}Installing ${CBL}${repo_name}${CYE} repository...${CNC}"

    if ! grep -q "\[${repo_name}\]" /etc/pacman.conf; then
        if printf "\n[%s]\nSigLevel = Optional TrustAll\nServer = http://gh0stzk.github.io/pkgs/x86_64\n" "$repo_name" \
           | sudo tee -a /etc/pacman.conf >/dev/null 2>>"$ERROR_LOG"; then
            printf "\n%b\n" "${BLD}${CYE}${repo_name} ${CGR}repository added successfully!${CNC}"
            if ! sudo pacman -Syy 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
                log_error "Database update failed"
                return 1
            fi
        else
            log_error "Error adding repository - check permissions"
            return 1
        fi
    else
        printf "\n%b\n" "${BLD}${CYE}The repository already exists and is configured${CNC}"
    fi
    sleep 1
}

add_chaotic_repo() {
    clear
    logo "Add chaotic-aur repository"
    repo_name="chaotic-aur"
    key_id="3056513887B78AEB"
    sleep 1

    printf "%b\n" "${BLD}${CYE}Installing ${CBL}${repo_name}${CYE} repository...${CNC}"

    if grep -q "\[${repo_name}\]" /etc/pacman.conf; then
        printf "%b\n" "\n${BLD}${CYE}Repository already exists in pacman.conf${CNC}"
        sleep 1
        return 0
    fi

    if ! pacman-key -l | grep -q "$key_id"; then
        printf "%b\n" "${BLD}${CYE}Adding GPG key...${CNC}"
        if ! sudo pacman-key --recv-key "$key_id" --keyserver keyserver.ubuntu.com 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            log_error "Failed to receive GPG key"
            return 1
        fi
        printf "%b\n" "${BLD}${CYE}Signing key locally...${CNC}"
        if ! sudo pacman-key --lsign-key "$key_id" 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            log_error "Failed to sign GPG key"
            return 1
        fi
    else
        printf "\n%b\n" "${BLD}${CYE}GPG key already exists in keyring${CNC}"
    fi

    chaotic_pkgs="chaotic-keyring chaotic-mirrorlist"
    for pkg in $chaotic_pkgs; do
        if ! is_installed "$pkg"; then
            printf "%b\n" "${BLD}${CYE}Installing ${CBL}${pkg}${CNC}"
            if ! sudo pacman -U --noconfirm "https://cdn-mirror.chaotic.cx/chaotic-aur/${pkg}.pkg.tar.zst" 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
                log_error "Failed to install ${pkg}"
                return 1
            fi
        else
            printf "%b\n" "${BLD}${CYE}${pkg} is already installed${CNC}"
        fi
    done

    printf "\n%b\n" "${BLD}${CYE}Adding repository to pacman.conf...${CNC}"
    if ! printf "\n[%s]\nInclude = /etc/pacman.d/chaotic-mirrorlist\n" "$repo_name" \
       | sudo tee -a /etc/pacman.conf >/dev/null 2>>"$ERROR_LOG"; then
        log_error "Failed to add repository configuration"
        return 1
    fi

    printf "%b\n" "\n${BLD}${CBL}${repo_name} ${CGR}Repository configured successfully!${CNC}"
    sleep 1
}

# ----- Packages -----
install_dependencies() {
    clear
    logo "Installing needed packages from official repositories..."
    sleep 1

    is_reflector
    printf "%b\n\n" "${BLD}${CGR}Getting the 5 best and fastest mirrors${CNC}"
    sudo reflector --verbose --age 12 --fastest 10 --score 10 --protocol https --latest 5 --sort rate --save /etc/pacman.d/mirrorlist
    sudo pacman -Syy

    # Add virt-what and cronie for Artix+s6 environment
    dependencies="alacritty base-devel bat brightnessctl bspwm clipcat dunst eza feh fzf thunar tumbler gvfs-mtp firefox geany git imagemagick jq jgmenu kitty libwebp maim mpc mpd mpv neovim ncmpcpp npm pamixer pacman-contrib papirus-icon-theme picom playerctl polybar lxsession-gtk3 python-gobject redshift rofi rustup sxhkd tmux xclip xdg-user-dirs xdo xdotool xsettingsd xorg-xdpyinfo xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot xorg-xwininfo yazi zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-ubuntu-mono-nerd webp-pixbuf-loader virt-what cronie"

    printf "\n%b\n\n" "${BLD}${CBL}Checking for required packages...${CNC}"
    sleep 1

    missing_pkgs=""
    for pkg in $dependencies; do
        if ! is_installed "$pkg"; then
            missing_pkgs="$missing_pkgs $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    if [ -n "$(printf "%s" "$missing_pkgs" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing_pkgs" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count packages, please wait...${CNC}"
        if sudo pacman -S --noconfirm $missing_pkgs 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            failed=""
            for pkg in $missing_pkgs; do
                if ! is_installed "$pkg"; then
                    failed="$failed $pkg"
                    log_error "Failed to install: $pkg"
                fi
            done
            if [ -z "$(printf "%s" "$failed" | tr -s ' ')" ]; then
                printf "%b\n\n" "${BLD}${CGR}All packages installed successfully!${CNC}"
            else
                fail_count=$(printf "%s" "$failed" | wc -w)
                printf "%b\n" "${BLD}${CRE}Failed to install $fail_count packages:${CNC}"
                printf "%b\n\n" "  ${BLD}${CYE}$(printf "%s" "$failed")${CNC}"
            fi
        else
            log_error "Critical error during batch installation"
            printf "%b\n" "${BLD}${CRE}Installation failed! Check log for details${CNC}"
            return 1
        fi
    else
        printf "%b\n" "\n${BLD}${CGR}All dependencies are already installed!${CNC}"
    fi

    sleep 1
}

install_gh0stzk_dependencies() {
    clear
    logo "Installing needed packages from gh0stzk repository..."
    sleep 1

    gh0stzk_dependencies="gh0stzk-gtk-themes gh0stzk-cursor-qogirr gh0stzk-icons-beautyline gh0stzk-icons-candy gh0stzk-icons-catppuccin-mocha gh0stzk-icons-dracula gh0stzk-icons-glassy gh0stzk-icons-gruvbox-plus-dark gh0stzk-icons-hack gh0stzk-icons-luv gh0stzk-icons-sweet-rainbow gh0stzk-icons-tokyo-night gh0stzk-icons-vimix-white gh0stzk-icons-zafiro gh0stzk-icons-zafiro-purple"

    printf "%b\n\n" "${BLD}${CBL}Checking for required packages...${CNC}"
    sleep 1

    missing=""
    for pkg in $gh0stzk_dependencies; do
        if ! is_installed "$pkg"; then
            missing="$missing $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count packages, please wait...${CNC}"
        if sudo pacman -S --noconfirm $missing 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            failed=""
            for pkg in $missing; do
                is_installed "$pkg" || failed="$failed $pkg"
            done
            if [ -z "$(printf "%s" "$failed" | tr -s ' ')" ]; then
                printf "%b\n\n" "${BLD}${CGR}All packages installed successfully!${CNC}"
            else
                printf "%b\n" "${BLD}${CRE}Failed to install:${CNC} ${BLD}${CYE}$failed${CNC}"
            fi
        else
            log_error "Critical error during batch installation"
            printf "%b\n" "${BLD}${CRE}Installation failed! Check log for details${CNC}"
            return 1
        fi
    else
        printf "\n%b\n" "${BLD}${CGR}All dependencies are already installed!${CNC}"
    fi
    sleep 1
}

install_chaotic_dependencies() {
    clear
    logo "Installing needed packages from chaotic repository..."
    sleep 1

    chaotic_dependencies="paru eww-git i3lock-color simple-mtpfs fzf-tab-git"

    printf "%b\n\n" "${BLD}${CBL}Checking for required packages...${CNC}"
    sleep 1

    missing=""
    for pkg in $chaotic_dependencies; do
        if ! is_installed "$pkg"; then
            missing="$missing $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count packages, please wait...${CNC}"
        if sudo pacman -S --noconfirm $missing 2>&1 | tee -a "$ERROR_LOG" >/dev/null; then
            failed=""
            for pkg in $missing; do
                is_installed "$pkg" || failed="$failed $pkg"
            done
            if [ -z "$(printf "%s" "$failed" | tr -s ' ')" ]; then
                printf "%b\n\n" "${BLD}${CGR}All packages installed successfully!${CNC}"
            else
                printf "%b\n" "${BLD}${CRE}Failed to install:${CNC} ${BLD}${CYE}$failed${CNC}"
            fi
        else
            log_error "Critical error during batch installation"
            printf "%b\n" "${BLD}${CRE}Installation failed! Check log for details${CNC}"
            return 1
        fi
    else
        printf "\n%b\n" "${BLD}${CGR}All dependencies are already installed!${CNC}"
    fi
    sleep 1
}

install_aur_dependencies() {
    clear
    logo "Installing AUR dependencies..."
    sleep 1

    aur_apps="xqp xwinwrap-0.9-bin"

    printf "%b\n\n" "${BLD}${CBL}Checking for required AUR packages...${CNC}"
    sleep 1

    missing=""
    for pkg in $aur_apps; do
        if ! is_installed "$pkg"; then
            missing="$missing $pkg"
            printf "%b\n" " ${BLD}${CYE}$pkg ${CRE}not installed${CNC}"
        else
            printf "%b\n" "${BLD}${CGR}$pkg ${CBL}already installed${CNC}"
        fi
    done

    if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
        count=$(printf "%s" "$missing" | wc -w)
        printf "\n%b\n\n" "${BLD}${CYE}Installing $count AUR packages, please wait...${CNC}"
        aur_failed=""
        for pkg in $missing; do
            printf "%b\n" "${BLD}${CBL}Processing: ${pkg}${CNC}"
            if paru -S --skipreview --noconfirm "$pkg" >> "$ERROR_LOG" 2>&1; then
                printf "%b\n" "  ${BLD}${CGR}Successfully installed!${CNC}"
            else
                log_error "AUR package installation failed: $pkg"
                aur_failed="$aur_failed $pkg"
                printf "%b\n" "  ${BLD}${CRE}Installation failed!${CNC}"
            fi
            sleep 0.3
        done
        if [ -n "$(printf "%s" "$aur_failed" | tr -s ' ')" ]; then
            fail_count=$(printf "%s" "$aur_failed" | wc -w)
            printf "%b\n" "\n${BLD}${CRE}Failed $fail_count/$count AUR packages:${CNC}"
            printf "%b\n\n" "${BLD}${CYE}$(printf "%s" "$aur_failed")${CNC}"
        else
            printf "\n%b\n\n" "${BLD}${CGR}All AUR packages installed successfully!${CNC}"
        fi
    else
        printf "\n%b\n\n" "${BLD}${CGR}All AUR dependencies are already installed!${CNC}"
    fi
    sleep 1
}

# ----- Fetch & backup -----
clone_dotfiles() {
    clear
    logo "Downloading dotfiles"
    repo_url="https://github.com/gh0stzk/dotfiles"
    repo_dir="$HOME/dotfiles"
    timestamp=$(date +"%Y%m%d-%H%M%S")
    sleep 1

    if [ -d "$repo_dir" ]; then
        backup_dir="${repo_dir}_$timestamp"
        printf "%b\n" "${BLD}${CYE}Existing repository found - renaming to: ${CBL}${backup_dir}${CNC}"
        mv -v "$repo_dir" "$backup_dir"
    fi

    printf "%b\n" "${BLD}${CYE}Cloning dotfiles from: ${CBL}${repo_url}${CNC}"
    if git clone --depth=1 "$repo_url" "$repo_dir" >> "$ERROR_LOG" 2>&1; then
        printf "%b\n\n" "${BLD}${CGR}Dotfiles cloned successfully!${CNC}"
    else
        log_error "Repository clone failed"
        printf "%b\n" "${BLD}${CRE}Clone failed! Check ${CYE}$ERROR_LOG${CNC}"
        return 1
    fi
    sleep 1
}

backup_existing_config() {
    clear
    logo "Backup files"
    date_tag=$(date +%Y%m%d-%H%M%S)
    sleep 1

    printf "%b" "My dotfiles come with a lightweight, simple, and functional Neovim configuration.
But if you already have a custom, super pro Neovim configuration and don't want to try mine, just type 'n'\n"

    while :; do
        printf "%b" "${BLD}${CYE}Do you want to use my Neovim setup? ${CNC}[y/N]: "
        read -r try_nvim
        case "$try_nvim" in
            [Yy]) try_nvim="y"; break ;;
            [Nn]|"") try_nvim="n"; break ;;
            *) printf " %b%bError:%b write 'y' or 'n'\n" "${BLD}" "${CRE}" "${CNC}" ;;
        esac
    done

    printf "\nMy dotfiles come with a beautiful, minimalist Firefox theme, but if you don't want to try it, just type 'n'.\n"
    while :; do
        printf "%b" "${BLD}${CYE}Do you want to use my Firefox theme? ${CNC}[y/N]: "
        read -r try_firefox
        case "$try_firefox" in
            [Yy]) try_firefox="y"; break ;;
            [Nn]|"") try_firefox="n"; break ;;
            *) printf " %b%bError:%b write 'y' or 'n'\n" "${BLD}" "${CRE}" "${CNC}" ;;
        esac
    done

    mkdir -p "$backup_folder" 2>>"$ERROR_LOG"
    printf "\n%b\n\n" "${BLD}${CYE}Backup directory: ${CBL}$backup_folder${CNC}"
    sleep 1

    backup_item() {
        type=$1
        path=$2
        target=$3
        base_name=$(basename "$path")
        exists=0
        [ "$type" = "d" ] && [ -d "$path" ] && exists=1
        [ "$type" = "f" ] && [ -f "$path" ] && exists=1

        if [ "$exists" -eq 1 ]; then
            if mv "$path" "$backup_folder/${target}_${date_tag}" 2>>"$ERROR_LOG"; then
                printf " %s%s %sbackup successful%s\n" "$BLD" "$base_name" "$CBL" "$CNC"
            else
                log_error "Error backup: $base_name"
                printf " %s%s %sbackup failed%s\n" "$BLD$CRE" "$base_name" "$CYE" "$CNC"
            fi
            sleep 0.2
        else
            printf " %s%s %snot found%s\n" "$BLD$CYE" "$base_name" "$CBL" "$CNC"
            sleep 0.1
        fi
    }

    config_folders="bspwm alacritty clipcat picom rofi eww sxhkd dunst kitty polybar geany gtk-3.0 ncmpcpp yazi tmux zsh mpd paru"
    for folder in $config_folders; do
        backup_item d "$HOME/.config/$folder" "$folder"
    done

    [ "$try_nvim" = "y" ] && backup_item d "$HOME/.config/nvim" "nvim"

    if [ "$try_firefox" = "y" ]; then
        if [ ! -d "$HOME/.mozilla" ]; then
            printf "%b\n" "${BLD}${CYE}Creating Firefox profile...${CNC}"
            timeout 1s firefox --headless --display=0 >/dev/null 2>&1
            sleep 1
        fi
        firefox_profile=$(find "$HOME/.mozilla/firefox" -maxdepth 1 -type d -name '*.default-release' 2>/dev/null | head -1)
        if [ -n "$firefox_profile" ]; then
            backup_item d "${firefox_profile}/chrome" "chrome"
            backup_item f "${firefox_profile}/user.js" "user.js"
        fi
    fi

    for item in "$HOME/.zshrc" "$HOME/.gtkrc-2.0" "$HOME/.icons"; do
        case "$item" in
            *".icons") backup_item d "$item" ".icons" ;;
            *) backup_item f "$item" "$(basename "$item")" ;;
        esac
    done

    printf "\n%b\n\n" "${BLD}${CGR}Backup completed!${CNC}"
    sleep 1
}

# ----- Install dotfiles -----
install_dotfiles() {
    clear
    logo "Installing dotfiles.."
    printf "%s%s Copying files to respective directories...%s\n\n" "$BLD" "$CBL" "$CNC"
    sleep 1

    for dir in "$HOME/.config" "$HOME/.local/bin" "$HOME/.local/share"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir" 2>>"$ERROR_LOG" && \
            printf "%s%sCreated directory: %s%s%s\n" "$BLD" "$CGR" "$CBL" "$dir" "$CNC"
        fi
    done

    copy_files() {
        source="$1"
        target="$2"
        item_name=$(basename "$source")
        if cp -R "$source" "$target" 2>>"$ERROR_LOG"; then
            printf "%s%s %scopied successfully!%s\n" "$BLD" "$CYE$item_name" "$CGR" "$CNC"
            return 0
        else
            log_error "Failed to copy: $item_name"
            printf "%s%s %scopy failed!%s\n" "$BLD" "$CYE$item_name" "$CRE" "$CNC"
            return 1
        fi
    }

    config_source="$HOME/dotfiles/config"
    for config_dir in "$config_source"/*; do
        dir_name=$(basename "$config_dir")
        if [ "$dir_name" = "nvim" ] && [ "$try_nvim" != "y" ]; then
            continue
        fi
        copy_files "$config_dir" "$HOME/.config/"
        sleep 0.1
    done

    for item in applications asciiart fonts startup-page bin; do
        source_path="$HOME/dotfiles/misc/$item"
        target_path="$HOME/.local/share/"
        [ "$item" = "bin" ] && target_path="$HOME/.local/"
        copy_files "$source_path" "$target_path"
        sleep 0.1
    done

    if [ "$try_firefox" = "y" ]; then
        firefox_profile=$(find "$HOME/.mozilla/firefox" -maxdepth 1 -type d -name '*.default-release' 2>/dev/null | head -n1)
        if [ -n "$firefox_profile" ]; then
            mkdir -p "$firefox_profile/chrome" 2>>"$ERROR_LOG"
            for item in "$HOME/dotfiles/misc/firefox/"*; do
                [ -e "$item" ] || continue
                item_name=$(basename "$item")
                target="$firefox_profile"
                if [ "$item_name" = "chrome" ]; then
                    for chrome_item in "$item"/*; do
                        copy_files "$chrome_item" "$firefox_profile/chrome/"
                    done
                else
                    copy_files "$item" "$target/"
                fi
            done
            user_js="$firefox_profile/user.js"
            startup_cfg="$HOME/.local/share/startup-page/config.js"
            if [ -f "$user_js" ]; then
                sed "s|/home/z0mbi3|/home/$USER|g" "$user_js" > "$user_js.tmp" && mv "$user_js.tmp" "$user_js" && \
                printf "%s%sFirefox config updated!%s\n" "$BLD" "$CGR" "$CNC"
            fi
            if [ -f "$startup_cfg" ]; then
                sed "s/name: 'gh0stzk'/name: '$USER'/" "$startup_cfg" > "$startup_cfg.tmp" && mv "$startup_cfg.tmp" "$startup_cfg" && \
                printf "%s%sStartup page updated!%s\n" "$BLD" "$CGR" "$CNC"
            fi
        else
            log_error "Firefox profile not found"
            printf "%s%sFirefox profile not found!%s\n" "$BLD" "$CRE" "$CNC"
        fi
    fi

    for file in "$HOME/dotfiles/home/.zshrc" "$HOME/dotfiles/home/.gtkrc-2.0" "$HOME/dotfiles/home/.icons"; do
        copy_files "$file" "$HOME/"
    done

    if fc-cache -rv >/dev/null 2>&1; then
        printf "\n%s%sFont cache updated successfully!%s\n" "$BLD" "$CGR" "$CNC"
    else
        log_error "Failed to update font cache"
    fi

    if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
        if xdg-user-dirs-update >/dev/null 2>&1; then
            printf "%s%sXdg dirs generated successfully!%s\n" "$BLD" "$CGR" "$CNC"
        else
            log_error "Failed to generate xdg dirs"
        fi
    fi

    if [ ! -d /etc/pacman.d/hooks ]; then
        sudo mkdir -p /etc/pacman.d/hooks
    fi
    if sudo cp "$HOME/dotfiles/misc/polybar-update.hook" /etc/pacman.d/hooks 2>>"$ERROR_LOG"; then
        printf "%s%sPacman hook copied successfully!%s\n" "$BLD" "$CGR" "$CNC"
    else
        log_error "Failed to copy pacman hook :("
    fi

    printf "\n%s%sDotfiles installed successfully!%s\n" "$BLD" "$CGR" "$CNC"
    sleep 1
}

# ----- Configure services (Artix s6 friendly) -----
configure_services() {
    clear
    logo "Configuring Services"
    picom_config="$HOME/.config/bspwm/src/config/picom.conf"
    sleep 1

    # MPD: session-based autostart (works regardless of init system)
    if pgrep -x mpd >/dev/null 2>&1; then
        printf "%b\n" "${BLD}${CYE}Stopping running mpd instance...${CNC}"
        pkill -TERM -x mpd || true
        sleep 1
    fi
    mkdir -p "$HOME/.config/mpd" >/dev/null 2>&1
    bspwmrc="$HOME/.config/bspwm/bspwmrc"
    if [ -f "$bspwmrc" ]; then
        if ! grep -q '^[^#]*mpd --no-daemon' "$bspwmrc"; then
            printf "%b\n" "${BLD}${CYE}Adding mpd autostart to bspwmrc...${CNC}"
            {
                printf "\n# Start mpd as user on login (Artix/s6)\n"
                printf "pgrep -x mpd >/dev/null || mpd --no-daemon &\n"
            } >> "$bspwmrc"
        fi
    fi
    lx_autostart="$HOME/.config/lxsession/LXDE/autostart"
    if [ -f "$lx_autostart" ]; then
        if ! grep -q 'mpd --no-daemon' "$lx_autostart"; then
            printf "%b\n" "${BLD}${CYE}Adding mpd autostart to lxsession...${CNC}"
            printf "@mpd --no-daemon\n" >> "$lx_autostart"
        fi
    fi
    printf "%b\n" "${BLD}${CGR}MPD configured to start in your session.${CNC}"

    # ArchUpdates periodic check: prefer cron (cronie)
    if command -v crontab >/dev/null 2>&1; then
        printf "%b\n" "${BLD}${CYE}Setting periodic ArchUpdates check via cron...${CNC}"
        tmp_cron="$(mktemp)"
        crontab -l 2>/dev/null | sed '/ArchUpdates-check/d' > "$tmp_cron" || true
        printf "0 9 * * * $HOME/.local/bin/ArchUpdates # ArchUpdates-check\n" >> "$tmp_cron"
        crontab "$tmp_cron" && rm -f "$tmp_cron"
        printf "%b\n" "${BLD}${CGR}Cron job installed (daily 09:00).${CNC}"
    else
        printf "%b\n" "${BLD}${CYE}cronie not available; skipping ArchUpdates timer. You can run ~/.local/bin/ArchUpdates from your session.${CNC}"
    fi

    # Virtual machine detection (virt-what or DMI heuristic)
    is_virtual_machine() {
        if command -v virt-what >/dev/null 2>&1; then
            # virt-what prints nothing on bare-metal; any output means VM
            [ -n "$(virt-what 2>/dev/null)" ]
        else
            grep -qiE '(virtualbox|kvm|vmware|qemu|hyper-v|bochs)' /sys/class/dmi/id/product_name 2>/dev/null
        fi
    }

    if is_virtual_machine; then
        printf "%b\n" "${BLD}${CYE}Virtual machine detected${CNC}"
        printf "\n%b\n" "${BLD}${CYE}Adjusting Picom configuration...${CNC}"
        if [ -f "$picom_config" ]; then
            if sed -i 's/backend = "glx"/backend = "xrender"/' "$picom_config" >> "$ERROR_LOG" 2>&1; then
                printf "%b\n" "${BLD}${CGR}Picom backend changed to xrender${CNC}"
            else
                log_error "Failed to modify Picom configuration (backend)"
            fi
            if sed -i 's/vsync = true/vsync = false/' "$picom_config" >> "$ERROR_LOG" 2>&1; then
                printf "%b\n" "${BLD}${CGR}Picom vSync disabled${CNC}"
            else
                log_error "Failed to modify Picom configuration (vsync)"
            fi
        else
            log_error "Picom configuration file not found: $picom_config"
            printf "%b\n" "${BLD}${CRE}Picom config file missing: ${CYE}${picom_config}${CNC}"
        fi
    fi

    sleep 1
}

# ----- Shell -----
change_default_shell() {
    clear
    logo "Changing default shell to zsh"
    zsh_path=$(command -v zsh)
    sleep 1

    if [ -z "$zsh_path" ]; then
        log_error "Zsh binary not found"
        printf "%b\n\n" "${BLD}${CRE}Zsh is not installed! Cannot change shell${CNC}"
        return 1
    fi

    if [ "$SHELL" != "$zsh_path" ]; then
        printf "%b\n" "${BLD}${CYE}Changing your shell to Zsh...${CNC}"
        if chsh -s "$zsh_path"; then
            printf "%b\n" "\n${BLD}${CGR}Shell changed successfully!${CNC}"
        else
            log_error "Error changing shell"
            printf "%b\n\n" "${BLD}${CRE}Error changing shell!${CNC}"
        fi
    else
        printf "%b\n\n" "${BLD}${CGR}Zsh is already your default shell!${CNC}"
    fi
    sleep 1
}

# ----- Final -----
final_prompt() {
    clear
    logo "Installation Complete"
    printf "%b\n" "${BLD}${CGR}Installation completed successfully!${CNC}"
    printf "%b\n\n" "${BLD}${CRE}You ${CBL}SHOULD ${CRE}restart your session or system to apply changes${CNC}"
    while :; do
        printf "%b" "${BLD}${CYE}Reboot now?${CNC} [y/N]: "
        read -r yn
        case "$yn" in
            [Yy]) printf "\n%b\n" "${BLD}${CGR}Initiating reboot...${CNC}"; sleep 1; sudo reboot; break ;;
            [Nn]|"") printf "\n%b\n\n" "${BLD}${CYE}Remember to reboot later to apply all changes.${CNC}"; break ;;
            *) printf " %b%bError:%b write 'y' or 'n'\n" "${BLD}" "${CRE}" "${CNC}" ;;
        esac
    done
}

# ----- Main run -----
initial_checks
welcome
add_gh0stzk_repo
add_chaotic_repo

install_dependencies
install_gh0stzk_dependencies
install_chaotic_dependencies
install_aur_dependencies
clone_dotfiles

backup_existing_config
install_dotfiles
configure_services
change_default_shell
final_prompt
