#!/bin/sh
#  ██████╗ ██╗ ██████╗███████╗    ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗     ██╗     ███████╗██████╗
#  ██╔══██╗██║██╔════╝██╔════╝    ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██║     ██╔════╝██╔══██╗
#  ██████╔╝██║██║     █████╗      ██║██╔██╗ ██║███████╗   ██║   ███████║██║     ██║     █████╗  ██████╔╝
#  ██╔══██╗██║██║     ██╔══╝      ██║██║╚██╗██║╚════██║   ██║   ██╔══██║██║     ██║     ██╔══╝  ██╔══██╗
#  ██║  ██║██║╚██████╗███████╗    ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗███████╗███████╗██║  ██║
#  ╚═╝  ╚═╝╚═╝ ╚═════╝╚══════╝    ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚══════╝╚══════╝╚═╝  ╚═╝
#
#  Author    -   gh0stzk (adapted for Artix s6 by ChatGPT)
#  Repo      -   https://github.com/gh0stzk/dotfiles
#  Last updated - 2025-08-29
#  https://chatgpt.com/share/68b225c2-a2ac-8002-9295-bb70c7649633 
#  RiceInstaller (Artix s6) - installs dotfiles with s6/66-friendly behavior
#
#  Differences vs original:
#   - Detects Artix + s6 and exits safely if not matched
#   - Does NOT touch Artix mirrorlist; only updates /etc/pacman.d/mirrorlist-arch (if enabled)
#   - Replaces systemd-only bits with s6/66-safe fallbacks (no systemctl, no systemd-detect-virt)
#   - Service setup is optional and uses 66 if available; otherwise skipped safely
#   - Installs only missing packages (uses pacman --needed) and avoids heavy optional stuff
#
#  Copyright (C) 2021-2025 gh0stzk
#  Licensed under GPL-3.0

# ------------- Styling ------------- #
CRE=$(tput setaf 1)    # Red
CYE=$(tput setaf 3)    # Yellow
CGR=$(tput setaf 2)    # Green
CBL=$(tput setaf 4)    # Blue
BLD=$(tput bold)       # Bold
CNC=$(tput sgr0)       # Reset

# ------------- Globals ------------- #
backup_folder="$HOME/.RiceBackup"
ERROR_LOG="$HOME/RiceError.log"
REPO_DOTFILES_URL="https://github.com/gh0stzk/dotfiles"
REPO_DOTFILES_DIR="$HOME/dotfiles"

# ------------- UI ------------- #
logo() {
  text="$1"
  printf "%b" "
               %%%
        %%%%%//%%%%%
      %%************%%%
  (%%//############*****%%
 %%%%**###&&&&&&&&&###**//
 %%(**##&&&#########&&&##**
 %%(**##*****#####*****##**%%%
 %%(**##     *****     ##**
   //##   @@**   @@   ##//
     ##     **###     ##
     #######     #####//
       ###**&&&&&**###
       &&&         &&&
       &&&////   &&
          &&//@@@**
            ..***

   ${BLD}${CRE}[ ${CYE}${text} ${CRE}]${CNC}\n\n"
}

log_error() {
  msg="$1"
  ts=$(date +"%Y-%m-%d %H:%M:%S")
  printf "[%s] ERROR: %s\n" "$ts" "$msg" >> "$ERROR_LOG"
  printf "%s%sERROR:%s %s\n" "$CRE" "$BLD" "$CNC" "$msg" >&2
}

# --------- Helpers / detection --------- #
cmd_exists() { command -v "$1" >/dev/null 2>&1; }

is_installed() { pacman -Qq "$1" >/dev/null 2>&1; }

require_not_root() {
  if [ "$(id -u)" = 0 ]; then
    log_error "This script MUST NOT be run as root user."
    exit 1
  fi
}

require_home_pwd() {
  if [ "$PWD" != "$HOME" ]; then
    log_error "Run the script from your HOME directory ($HOME)."
    exit 1
  fi
}

require_internet() {
  if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null 2>&1; then
    log_error "No internet connection detected."
    exit 1
  fi
}

require_artix_s6() {
  if [ ! -f /etc/artix-release ]; then
    log_error "This installer is intended for Artix Linux. /etc/artix-release not found."
    exit 1
  fi
  # PID 1 check
  pid1=$(ps -p 1 -o comm= 2>/dev/null | tr -d '\n')
  case "$pid1" in
    s6-svscan|66|s6-svscanboot|s6-supervise)
      : ;; # OK
    *)
      log_error "Init does not look like s6/66 (pid1=$pid1). This build targets Artix s6."
      exit 1 ;;
  esac
}

is_vm() {
  # Systemd-free VM hint
  if grep -qiE 'hypervisor' /proc/cpuinfo 2>/dev/null; then
    return 0
  fi
  if [ -r /proc/1/environ ] && tr '\0' '\n' < /proc/1/environ | grep -qiE 'container|virt'; then
    return 0
  fi
  return 1
}

# 66 (s6 service manager) helpers — optional
have_66() { cmd_exists 66; }
66_service_exists() {
  # best-effort: check if service name appears in 66 list (system scope)
  66 list 2>/dev/null | awk '{print $1}' | grep -qx "$1" 2>/dev/null
}

start_service_66() {
  svc="$1"; scope="$2" # scope: system|user
  if ! have_66; then return 1; fi
  case "$scope" in
    user)  66 -t user start "$svc" >/dev/null 2>>"$ERROR_LOG" ;;
    *)     sudo 66 start "$svc"   >/dev/null 2>>"$ERROR_LOG" ;;
  esac
}

enable_service_66() {
  svc="$1"; scope="$2"
  if ! have_66; then return 1; fi
  case "$scope" in
    user)  66 -t user enable "$svc" >/dev/null 2>>"$ERROR_LOG" ;;
    *)     sudo 66 enable "$svc"   >/dev/null 2>>"$ERROR_LOG" ;;
  esac
}

# ------------- Steps ------------- #
initial_checks() {
  require_not_root
  require_home_pwd
  require_internet
  require_artix_s6
}

welcome() {
  clear; logo "Welcome $USER (Artix s6)"
  printf "%b" "${BLD}${CGR}This will install gh0stzk dotfiles on Artix (s6):${CNC}

  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Add ${CBL}gh0stzk${CNC} repo and ${CBL}Chaotic-AUR${CNC}
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Install only missing dependencies (no bloat / --needed)
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Clone dotfiles into ${HOME}/dotfiles
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Backup existing configs and apply new ones
  ${BLD}${CGR}[${CYE}i${CGR}]${CNC} Optional: try to enable services via 66 if available

${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}No systemd actions are used; s6/66 only (and optional).${CNC}
${BLD}${CGR}[${CRE}!${CGR}]${CNC} ${BLD}${CRE}Artix mirrorlist is NOT modified (only arch mirrorlist if present).${CNC}

"
  while :; do
    printf " %b" "${BLD}${CGR}Continue?${CNC} [y/N]: "; read -r yn
    case "$yn" in
      [Yy]) break ;;
      [Nn]|"") printf "\n%b\n" "${BLD}${CYE}Cancelled.${CNC}"; exit 0 ;;
      *) printf "\n%b\n" "${BLD}${CRE}Type 'y' or 'n'.${CNC}" ;;
    esac
  done
}

# --- Repositories --- #
add_gh0stzk_repo() {
  clear; logo "Add gh0stzk repo"; repo="gh0stzk-dotfiles"
  printf "%b\n" "${BLD}${CYE}Configuring ${CBL}${repo}${CYE}...${CNC}"
  if ! grep -q "\[${repo}\]" /etc/pacman.conf; then
    if printf "\n[%s]\nSigLevel = Optional TrustAll\nServer = http://gh0stzk.github.io/pkgs/x86_64\n" "$repo" | sudo tee -a /etc/pacman.conf >/dev/null 2>>"$ERROR_LOG"; then
      sudo pacman -Syy >/dev/null 2>>"$ERROR_LOG"
      printf "%b\n" "${BLD}${CGR}Added ${repo}.${CNC}"
    else
      log_error "Failed to add ${repo} to pacman.conf"; return 1
    fi
  else
    printf "%b\n" "${BLD}${CYE}${repo} already present.${CNC}"
  fi
}

add_chaotic_repo() {
  clear; logo "Add chaotic-aur repo"; repo="chaotic-aur"; key="3056513887B78AEB"
  printf "%b\n" "${BLD}${CYE}Configuring ${CBL}${repo}${CYE}...${CNC}"
  if ! grep -q "\[${repo}\]" /etc/pacman.conf; then
    if ! pacman-key -l | grep -q "$key"; then
      printf "%b\n" "${BLD}${CYE}Importing & locally signing key...${CNC}"
      sudo pacman-key --recv-key "$key" --keyserver keyserver.ubuntu.com >/dev/null 2>>"$ERROR_LOG" || return 1
      sudo pacman-key --lsign-key "$key" >/dev/null 2>>"$ERROR_LOG" || return 1
    fi
    for p in chaotic-keyring chaotic-mirrorlist; do
      if ! is_installed "$p"; then
        printf "%b\n" "${BLD}${CYE}Installing ${p}...${CNC}"
        sudo pacman -U --noconfirm "https://cdn-mirror.chaotic.cx/chaotic-aur/${p}.pkg.tar.zst" >/dev/null 2>>"$ERROR_LOG" || return 1
      fi
    done
    printf "\n"; printf "%b\n" "${BLD}${CYE}Appending repo to pacman.conf...${CNC}"
    if printf "\n[%s]\nInclude = /etc/pacman.d/chaotic-mirrorlist\n" "$repo" | sudo tee -a /etc/pacman.conf >/dev/null 2>>"$ERROR_LOG"; then
      sudo pacman -Syy >/dev/null 2>>"$ERROR_LOG"
      printf "%b\n" "${BLD}${CGR}${repo} added.${CNC}"
    else
      log_error "Failed appending ${repo} to pacman.conf"; return 1
    fi
  else
    printf "%b\n" "${BLD}${CYE}${repo} already present.${CNC}"
  fi
}

# --- Mirrors (safe for Artix) --- #
update_arch_mirrors_safe() {
  # Only touch Arch mirrorlist if it's used via Include in pacman.conf
  if grep -q "/etc/pacman.d/mirrorlist-arch" /etc/pacman.conf; then
    if ! cmd_exists reflector; then
      printf "%b\n" "${BLD}${CBL}Installing reflector to refresh Arch mirrors...${CNC}"
      sudo pacman -S --needed --noconfirm reflector >/dev/null 2>>"$ERROR_LOG" || return 0
    fi
    printf "%b\n" "${BLD}${CGR}Refreshing top Arch mirrors (mirrorlist-arch)...${CNC}"
    sudo reflector --verbose --protocol https --age 12 --latest 10 --sort rate \
      --save /etc/pacman.d/mirrorlist-arch >/dev/null 2>>"$ERROR_LOG" || printf "%b\n" "${BLD}${CYE}reflector failed; keeping existing mirrorlist-arch.${CNC}"
    sudo pacman -Syy >/dev/null 2>>"$ERROR_LOG"
  fi
}

# --- Packages --- #
install_dependencies() {
  clear; logo "Install core packages"
  update_arch_mirrors_safe

  # Minimal set required by the dots; install only if missing
  deps="alacritty base-devel bat brightnessctl bspwm clipcat dunst eza feh fzf thunar tumbler gvfs-mtp firefox geany git imagemagick jq jgmenu kitty libwebp maim mpc mpd mpv neovim ncmpcpp npm pamixer pacman-contrib papirus-icon-theme picom playerctl polybar lxsession-gtk3 python-gobject redshift rofi rustup sxhkd tmux xclip xdg-user-dirs xdo xdotool xsettingsd xorg-xdpyinfo xorg-xkill xorg-xprop xorg-xrandr xorg-xsetroot xorg-xwininfo yazi zsh zsh-autosuggestions zsh-history-substring-search zsh-syntax-highlighting ttf-inconsolata ttf-jetbrains-mono ttf-jetbrains-mono-nerd ttf-terminus-nerd ttf-ubuntu-mono-nerd webp-pixbuf-loader"

  missing=""
  for p in $deps; do
    is_installed "$p" || missing="$missing $p"
  done
  if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
    printf "%b\n" "${BLD}${CYE}Installing missing: ${missing}${CNC}"
    # --needed ensures we don't reinstall; tee only errors to log to keep UI clean
    if ! sudo pacman -S --needed --noconfirm $missing >/dev/null 2>>"$ERROR_LOG"; then
      log_error "Some core packages failed to install."
    fi
  else
    printf "%b\n" "${BLD}${CGR}All core packages already present.${CNC}"
  fi
}

install_gh0stzk_dependencies() {
  clear; logo "Install gh0stzk themes/icons"
  pkgs="gh0stzk-gtk-themes gh0stzk-cursor-qogirr gh0stzk-icons-beautyline gh0stzk-icons-candy gh0stzk-icons-catppuccin-mocha gh0stzk-icons-dracula gh0stzk-icons-glassy gh0stzk-icons-gruvbox-plus-dark gh0stzk-icons-hack gh0stzk-icons-luv gh0stzk-icons-sweet-rainbow gh0stzk-icons-tokyo-night gh0stzk-icons-vimix-white gh0stzk-icons-zafiro gh0stzk-icons-zafiro-purple"
  missing=""; for p in $pkgs; do is_installed "$p" || missing="$missing $p"; done
  if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
    printf "%b\n" "${BLD}${CYE}Installing: ${missing}${CNC}"
    sudo pacman -S --needed --noconfirm $missing >/dev/null 2>>"$ERROR_LOG" || log_error "Theme/icon install failed"
  else
    printf "%b\n" "${BLD}${CGR}All theme/icon packages already present.${CNC}"
  fi
}

install_chaotic_dependencies() {
  clear; logo "Install Chaotic packages"
  pkgs="paru eww-git i3lock-color simple-mtpfs fzf-tab-git"
  missing=""; for p in $pkgs; do is_installed "$p" || missing="$missing $p"; done
  if [ -n "$(printf "%s" "$missing" | tr -s ' ')" ]; then
    printf "%b\n" "${BLD}${CYE}Installing: ${missing}${CNC}"
    sudo pacman -S --needed --noconfirm $missing >/dev/null 2>>"$ERROR_LOG" || log_error "Chaotic install failed"
  else
    printf "%b\n" "${BLD}${CGR}All Chaotic packages already present.${CNC}"
  fi
}

install_aur_dependencies() {
  clear; logo "Install AUR deps via paru"
  if ! cmd_exists paru; then
    log_error "paru not found; skipped AUR installs. (Chaotic should have provided paru)"
    return 0
  fi
  aur="xqp xwinwrap-0.9-bin"
  for p in $aur; do
    if ! is_installed "$p"; then
      printf "%b\n" "${BLD}${CBL}AUR: ${p}${CNC}"
      paru -S --needed --noconfirm --skipreview "$p" >>"$ERROR_LOG" 2>&1 || log_error "Failed AUR: $p"
    fi
  done
}

clone_dotfiles() {
  clear; logo "Clone dotfiles"
  ts=$(date +"%Y%m%d-%H%M%S")
  if [ -d "$REPO_DOTFILES_DIR" ]; then
    mv -v "$REPO_DOTFILES_DIR" "${REPO_DOTFILES_DIR}_$ts" >/dev/null 2>>"$ERROR_LOG"
  fi
  printf "%b\n" "${BLD}${CYE}Cloning from: ${CBL}${REPO_DOTFILES_URL}${CNC}"
  if git clone --depth=1 "$REPO_DOTFILES_URL" "$REPO_DOTFILES_DIR" >>"$ERROR_LOG" 2>&1; then
    printf "%b\n" "${BLD}${CGR}Dotfiles cloned.${CNC}"
  else
    log_error "git clone failed"; return 1
  fi
}

backup_existing_config() {
  clear; logo "Backup configs"; date_tag=$(date +%Y%m%d-%H%M%S)
  mkdir -p "$backup_folder" 2>>"$ERROR_LOG"

  try_nvim="y"; try_firefox="y"  # defaults: install both; change to "n" if you want to skip

  backup_item() {
    typ="$1"; path="$2"; tag="$3"
    if [ "$typ" = d ] && [ -d "$path" ] || [ "$typ" = f ] && [ -f "$path" ]; then
      mv "$path" "$backup_folder/${tag}_${date_tag}" 2>>"$ERROR_LOG" && \
      printf " %s%s %sbackup OK%s\n" "$BLD" "$(basename "$path")" "$CGR" "$CNC" || \
      { log_error "backup failed: $path"; printf " %s%s %sbackup FAIL%s\n" "$BLD$CRE" "$(basename "$path")" "$CYE" "$CNC"; }
    fi
  }

  for d in bspwm alacritty clipcat picom rofi eww sxhkd dunst kitty polybar geany gtk-3.0 ncmpcpp yazi tmux zsh mpd paru; do
    backup_item d "$HOME/.config/$d" "$d"
  done
  [ "$try_nvim" = y ] && backup_item d "$HOME/.config/nvim" nvim

  if [ "$try_firefox" = y ]; then
    [ -d "$HOME/.mozilla" ] || { timeout 1s firefox --headless --display=0 >/dev/null 2>&1; sleep 1; }
    prof=$(find "$HOME/.mozilla/firefox" -maxdepth 1 -type d -name '*.default-release' 2>/dev/null | head -1)
    if [ -n "$prof" ]; then
      backup_item d "$prof/chrome" chrome
      backup_item f "$prof/user.js" user.js
    fi
  fi

  for f in "$HOME/.zshrc" "$HOME/.gtkrc-2.0" "$HOME/.icons"; do
    case "$f" in
      *.icons) backup_item d "$f" .icons ;;
      *)       backup_item f "$f" "$(basename "$f")" ;;
    esac
  done
}

install_dotfiles() {
  clear; logo "Install dotfiles"
  # ensure dirs
  for d in "$HOME/.config" "$HOME/.local/bin" "$HOME/.local/share"; do
    [ -d "$d" ] || { mkdir -p "$d" 2>>"$ERROR_LOG" && printf "%s%sCreated:%s %s%s\n" "$BLD" "$CGR" "$CBL" "$d" "$CNC"; }
  done

  copy_files() { src="$1"; dst="$2"; name="$(basename "$src")"; cp -R "$src" "$dst" 2>>"$ERROR_LOG" && printf "%s%s %scopied%s\n" "$BLD" "$CYE$name" "$CGR" "$CNC" || { log_error "copy fail: $name"; printf "%s%s %sFAIL%s\n" "$BLD" "$CYE$name" "$CRE" "$CNC"; } }

  cfg_src="$REPO_DOTFILES_DIR/config"
  for c in "$cfg_src"/*; do
    b="$(basename "$c")"
    [ "$b" = nvim ] && [ "$try_nvim" != y ] && continue
    copy_files "$c" "$HOME/.config/"
  done

  for x in applications asciiart fonts startup-page bin; do
    src="$REPO_DOTFILES_DIR/misc/$x"; dst="$HOME/.local/share/"; [ "$x" = bin ] && dst="$HOME/.local/"
    copy_files "$src" "$dst"
  done

  if [ "$try_firefox" = y ]; then
    prof=$(find "$HOME/.mozilla/firefox" -maxdepth 1 -type d -name '*.default-release' 2>/dev/null | head -1)
    if [ -n "$prof" ]; then
      mkdir -p "$prof/chrome" 2>>"$ERROR_LOG"
      for i in "$REPO_DOTFILES_DIR/misc/firefox"/*; do
        if [ -e "$i" ]; then
          if [ "$(basename "$i")" = chrome ]; then
            for j in "$i"/*; do copy_files "$j" "$prof/chrome/"; done
          else
            copy_files "$i" "$prof/"
          fi
        fi
      done
      [ -f "$prof/user.js" ] && sed "s|/home/z0mbi3|/home/$USER|g" "$prof/user.js" > "$prof/user.js.tmp" && mv "$prof/user.js.tmp" "$prof/user.js"
      [ -f "$HOME/.local/share/startup-page/config.js" ] && sed "s/name: 'gh0stzk'/name: '$USER'/" "$HOME/.local/share/startup-page/config.js" > "$HOME/.local/share/startup-page/config.js.tmp" && mv "$HOME/.local/share/startup-page/config.js.tmp" "$HOME/.local/share/startup-page/config.js"
      printf "%b\n" "${BLD}${CGR}Firefox theme updated.${CNC}"
    else
      log_error "Firefox profile not found"; printf "%b\n" "${BLD}${CYE}Firefox profile not found; skipped.${CNC}"
    fi
  fi

  for f in "$REPO_DOTFILES_DIR/home/.zshrc" "$REPO_DOTFILES_DIR/home/.gtkrc-2.0" "$REPO_DOTFILES_DIR/home/.icons"; do
    copy_files "$f" "$HOME/"
  done

  fc-cache -rv >/dev/null 2>>"$ERROR_LOG" && printf "%b\n" "${BLD}${CGR}Font cache refreshed.${CNC}"
  [ -e "$HOME/.config/user-dirs.dirs" ] || xdg-user-dirs-update >/dev/null 2>>"$ERROR_LOG"

  # pacman hook for polybar updates
  if [ ! -d /etc/pacman.d/hooks ]; then sudo mkdir -p /etc/pacman.d/hooks; fi
  sudo cp "$REPO_DOTFILES_DIR/misc/polybar-update.hook" /etc/pacman.d/hooks 2>>"$ERROR_LOG" && printf "%b\n" "${BLD}${CGR}Pacman hook installed.${CNC}"
}

configure_services() {
  clear; logo "Services (s6/66)"
  picom_cfg="$HOME/.config/bspwm/src/config/picom.conf"

  # MPD: Prefer NOT to enable system service; try 66 if available & service exists
  if have_66 && 66_service_exists mpd; then
    printf "%b\n" "${BLD}${CYE}Enabling MPD via 66 (system scope)...${CNC}"
    enable_service_66 mpd system && start_service_66 mpd system && printf "%b\n" "${BLD}${CGR}MPD enabled & started (system).${CNC}" || printf "%b\n" "${BLD}${CYE}MPD 66 action failed; you can start mpd from your session.${CNC}"
  else
    printf "%b\n" "${BLD}${CYE}66 not present or mpd service missing; skipping.\nStart user mpd in bspwmrc if desired: 'mpd --no-daemon &'.${CNC}"
  fi

  # VM-friendly Picom tweaks
  if is_vm; then
    if [ -f "$picom_cfg" ]; then
      sed -i 's/backend = "glx"/backend = "xrender"/' "$picom_cfg" 2>>"$ERROR_LOG"
      sed -i 's/vsync = true/vsync = false/' "$picom_cfg" 2>>"$ERROR_LOG"
      printf "%b\n" "${BLD}${CGR}Picom adjusted for VM (xrender, no vsync).${CNC}"
    else
      printf "%b\n" "${BLD}${CYE}Picom config not found at: ${picom_cfg}${CNC}"
    fi
  fi
}

change_default_shell() {
  clear; logo "Default shell: zsh"
  z="$(command -v zsh)" || true
  if [ -z "$z" ]; then
    log_error "zsh binary not found"; printf "%b\n" "${BLD}${CRE}Zsh missing; cannot change shell.${CNC}"; return 0
  fi
  if [ "$SHELL" != "$z" ]; then
    printf "%b\n" "${BLD}${CYE}Changing default shell to Zsh...${CNC}"
    if chsh -s "$z"; then printf "%b\n" "${BLD}${CGR}Shell changed.${CNC}"; else printf "%b\n" "${BLD}${CRE}chsh failed.${CNC}"; fi
  else
    printf "%b\n" "${BLD}${CGR}Zsh is already your default shell.${CNC}"
  fi
}

final_prompt() {
  clear; logo "Done"
  printf "%b\n" "${BLD}${CGR}Installation finished successfully!${CNC}"
  printf "%b\n\n" "${BLD}${CRE}Please reboot to apply everything.${CNC}"
  while :; do
    printf "%b" "${BLD}${CYE}Reboot now?${CNC} [y/N]: "; read -r yn
    case "$yn" in
      [Yy]) printf "\n%b\n" "${BLD}${CGR}Rebooting...${CNC}"; sleep 1; sudo reboot; break ;;
      [Nn]|"") printf "\n%b\n\n" "${BLD}${CYE}Reboot skipped. Remember to reboot later.${CNC}"; break ;;
      *) printf " %b%bError:%b write 'y' or 'n'\n" "$BLD" "$CRE" "$CNC" ;;
    esac
  done
}

# ------------- Main ------------- #
initial_checks
welcome
add_gh0stzk_repo || true
add_chaotic_repo || true
install_dependencies
install_gh0stzk_dependencies || true
install_chaotic_dependencies || true
install_aur_dependencies || true
clone_dotfiles || true
backup_existing_config
install_dotfiles
configure_services
change_default_shell
final_prompt
